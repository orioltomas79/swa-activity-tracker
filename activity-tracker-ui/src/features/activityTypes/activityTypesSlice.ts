import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { ActivityType } from "../../api/apiClient.g.nswag";
import apiClient from "../../api/apiClient";
import { CreateActivityTypePayload } from "../../api/activityTypesApi";

export interface ActivityTypesState {
  value: ActivityType[];
  status: "idle" | "loading" | "failed";
}

const initialState: ActivityTypesState = {
  value: [],
  status: "idle",
};

const FETCH_ACTIVITY_TYPES = "activitytypes/FETCH_ACTIVITY_TYPES";
const SAVE_ACTIVITY_TYPES = "activitytypes/SAVE_ACTIVITY_TYPES";
const DELETE_ACTIVITY_TYPES = "activitytypes/DELETE_ACTIVITY_TYPES";

export interface DeleteActivityTypesParams {
  activityTypeId: string;
}

export const fetchActivityTypes = createAsyncThunk(
  FETCH_ACTIVITY_TYPES,
  async () => {
    return await apiClient.activityTypes.getActivityTypes();
  }
);

export const saveActivityType = createAsyncThunk(
  SAVE_ACTIVITY_TYPES,
  async ({ name }: CreateActivityTypePayload) => {
    return await apiClient.activityTypes.addActivityType({ name });
  }
);

export const deleteActivityType = createAsyncThunk(
  DELETE_ACTIVITY_TYPES,
  async ({ activityTypeId }: DeleteActivityTypesParams) => {
    return await apiClient.activityTypes.deleteActivityType(activityTypeId);
  }
);

export const activityTypesSlice = createSlice({
  name: "activityTypes",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchActivityTypes.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchActivityTypes.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = action.payload;
      })
      .addCase(fetchActivityTypes.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(saveActivityType.pending, (state) => {
        state.status = "loading";
      })
      .addCase(saveActivityType.fulfilled, (state, action) => {
        state.status = "idle";
        state.value.push(action.payload);
      })
      .addCase(saveActivityType.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(deleteActivityType.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deleteActivityType.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = state.value.filter(
          (a) => a.id !== action.meta.arg.activityTypeId
        );
      })
      .addCase(deleteActivityType.rejected, (state) => {
        state.status = "failed";
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectActivityTypes = (state: RootState) => state.activityTypes;

export default activityTypesSlice.reducer;
