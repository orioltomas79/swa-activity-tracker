//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class ActivitiesClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? "http://localhost:7071/api";
  }

  /**
   * Gets all activities
   * @return Returns all activities
   */
  getActivities(): Promise<Activity[]> {
    let url_ = this.baseUrl + "/Activities";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetActivities(_response);
    });
  }

  protected processGetActivities(response: Response): Promise<Activity[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ""
            ? null
            : (JSON.parse(_responseText, this.jsonParseReviver) as Activity[]);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<Activity[]>(null as any);
  }

  /**
   * Adds a new activity
   * @param body (optional) The activity
   * @return Returns the activity that has been created
   */
  addActivity(body: CreateNewActivityRequest | undefined): Promise<Activity> {
    let url_ = this.baseUrl + "/Activities";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processAddActivity(_response);
    });
  }

  protected processAddActivity(response: Response): Promise<Activity> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 201) {
      return response.text().then((_responseText) => {
        let result201: any = null;
        result201 =
          _responseText === ""
            ? null
            : (JSON.parse(_responseText, this.jsonParseReviver) as Activity);
        return result201;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<Activity>(null as any);
  }

  /**
   * Gets activities stats
   * @return Returns activities stats
   */
  getActivitiesStats(): Promise<GetActivitiesStatsDto[]> {
    let url_ = this.baseUrl + "/Activities/Stats";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetActivitiesStats(_response);
    });
  }

  protected processGetActivitiesStats(
    response: Response
  ): Promise<GetActivitiesStatsDto[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ""
            ? null
            : (JSON.parse(
                _responseText,
                this.jsonParseReviver
              ) as GetActivitiesStatsDto[]);
        return result200;
      });
    } else if (status === 500) {
      return response.text().then((_responseText) => {
        let result500: any = null;
        result500 =
          _responseText === ""
            ? null
            : (JSON.parse(
                _responseText,
                this.jsonParseReviver
              ) as ProblemDetails);
        return throwException(
          "Internal server error",
          status,
          _responseText,
          _headers,
          result500
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<GetActivitiesStatsDto[]>(null as any);
  }

  /**
   * Deletes an activity
   * @param year Activity year
   * @param month Activity month
   * @param id Activity id
   * @return When the activity has been deleted
   */
  deleteActivity(year: number, month: number, id: string): Promise<void> {
    let url_ = this.baseUrl + "/Activities/{year}/{month}/{id}";
    if (year === undefined || year === null)
      throw new Error("The parameter 'year' must be defined.");
    url_ = url_.replace("{year}", encodeURIComponent("" + year));
    if (month === undefined || month === null)
      throw new Error("The parameter 'month' must be defined.");
    url_ = url_.replace("{month}", encodeURIComponent("" + month));
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "DELETE",
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDeleteActivity(_response);
    });
  }

  protected processDeleteActivity(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 204) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        return throwException(
          "When the activity is not found",
          status,
          _responseText,
          _headers
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class ActivityTypesClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? "http://localhost:7071/api";
  }

  /**
   * Gets all activity types
   * @return Returns all activity types
   */
  getActivityTypes(): Promise<ActivityType[]> {
    let url_ = this.baseUrl + "/ActivityTypes";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetActivityTypes(_response);
    });
  }

  protected processGetActivityTypes(
    response: Response
  ): Promise<ActivityType[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ""
            ? null
            : (JSON.parse(
                _responseText,
                this.jsonParseReviver
              ) as ActivityType[]);
        return result200;
      });
    } else if (status === 500) {
      return response.text().then((_responseText) => {
        let result500: any = null;
        result500 =
          _responseText === ""
            ? null
            : (JSON.parse(
                _responseText,
                this.jsonParseReviver
              ) as ProblemDetails);
        return throwException(
          "Internal server error",
          status,
          _responseText,
          _headers,
          result500
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<ActivityType[]>(null as any);
  }

  /**
   * Adds a new activity type
   * @param body (optional) The activity type
   * @return Returns the activity type that has been created
   */
  addActivityType(
    body: CreateNewActivityTypeRequest | undefined
  ): Promise<ActivityType> {
    let url_ = this.baseUrl + "/ActivityTypes";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processAddActivityType(_response);
    });
  }

  protected processAddActivityType(response: Response): Promise<ActivityType> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 201) {
      return response.text().then((_responseText) => {
        let result201: any = null;
        result201 =
          _responseText === ""
            ? null
            : (JSON.parse(
                _responseText,
                this.jsonParseReviver
              ) as ActivityType);
        return result201;
      });
    } else if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        result400 =
          _responseText === ""
            ? null
            : (JSON.parse(
                _responseText,
                this.jsonParseReviver
              ) as ValidationProblemDetails);
        return throwException(
          "Bad request",
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status === 500) {
      return response.text().then((_responseText) => {
        let result500: any = null;
        result500 =
          _responseText === ""
            ? null
            : (JSON.parse(
                _responseText,
                this.jsonParseReviver
              ) as ProblemDetails);
        return throwException(
          "Internal server error",
          status,
          _responseText,
          _headers,
          result500
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<ActivityType>(null as any);
  }

  /**
   * Deletes an activity type
   * @param id Activity Type id
   * @return When the activity type has been deleted
   */
  deleteActivityType(id: string): Promise<void> {
    let url_ = this.baseUrl + "/ActivityTypes/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "DELETE",
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processDeleteActivityType(_response);
    });
  }

  protected processDeleteActivityType(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 500) {
      return response.text().then((_responseText) => {
        let result500: any = null;
        result500 =
          _responseText === ""
            ? null
            : (JSON.parse(
                _responseText,
                this.jsonParseReviver
              ) as ProblemDetails);
        return throwException(
          "Internal server error",
          status,
          _responseText,
          _headers,
          result500
        );
      });
    } else if (status === 204) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 404) {
      return response.text().then((_responseText) => {
        return throwException(
          "When the activity type is not found",
          status,
          _responseText,
          _headers
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }
}

export class UsersClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? "http://localhost:7071/api";
  }

  /**
   * Gets current user claims
   * @return The OK response
   */
  getUserClaims(): Promise<UserClaims> {
    let url_ = this.baseUrl + "/GetUserClaims";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "application/json",
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetUserClaims(_response);
    });
  }

  protected processGetUserClaims(response: Response): Promise<UserClaims> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        result200 =
          _responseText === ""
            ? null
            : (JSON.parse(_responseText, this.jsonParseReviver) as UserClaims);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<UserClaims>(null as any);
  }
}

export interface Activity {
  id?: string;
  activityTypeId?: string;
  date?: string;

  [key: string]: any;
}

export interface ActivityType {
  id?: string;
  name?: string;

  [key: string]: any;
}

export interface CreateNewActivityRequest {
  activityType?: string;
  date?: string;

  [key: string]: any;
}

export interface CreateNewActivityTypeRequest {
  name?: string;

  [key: string]: any;
}

export interface GetActivitiesStatsDto {
  activityTypeId?: string;
  activityTypeName?: string;
  countLast7Days?: number;
  count8to14DaysAgo?: number;
  count15to21DaysAgo?: number;
  count22to28DaysAgo?: number;
  avgLast14Days?: number;
  avgLast28Days?: number;

  [key: string]: any;
}

export interface ProblemDetails {
  type?: string;
  title?: string;
  status?: number | null;
  detail?: string;
  instance?: string;
  extensions?: { [key: string]: any };

  [key: string]: any;
}

export interface UserClaims {
  name?: string;
  authType?: string;

  [key: string]: any;
}

export interface ValidationProblemDetails {
  errors?: { [key: string]: string[] };
  type?: string;
  title?: string;
  status?: number | null;
  detail?: string;
  instance?: string;
  extensions?: { [key: string]: any };

  [key: string]: any;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
