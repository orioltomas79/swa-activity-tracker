import { createSlice } from "@reduxjs/toolkit";
import { initialState } from "./types";
import {
  fetchActivityTypes,
  postActivityType,
  deleteActivityType,
} from "./actions";

export const activityTypesSlice = createSlice({
  name: "activityTypes",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchActivityTypes.pending, (state) => {
        state.fetchStatus = "loading";
      })
      .addCase(fetchActivityTypes.fulfilled, (state, action) => {
        state.fetchStatus = "succeeded";
        state.activityTypes = action.payload;
      })
      .addCase(fetchActivityTypes.rejected, (state, action) => {
        state.fetchStatus = "failed";
        state.error = action.error.message;
      })
      .addCase(postActivityType.pending, (state) => {
        state.operationStatus = "loading";
      })
      .addCase(postActivityType.fulfilled, (state, action) => {
        state.operationStatus = "succeeded";
        state.activityTypes.push(action.payload);
      })
      .addCase(postActivityType.rejected, (state, action) => {
        state.operationStatus = "failed";
        state.error = action.error.message;
      })
      .addCase(deleteActivityType.pending, (state) => {
        state.operationStatus = "loading";
      })
      .addCase(deleteActivityType.fulfilled, (state, action) => {
        state.operationStatus = "succeeded";
        state.activityTypes = state.activityTypes.filter(
          (a) => a.id !== action.meta.arg
        );
      })
      .addCase(deleteActivityType.rejected, (state, action) => {
        state.operationStatus = "failed";
        state.error = action.error.message;
      });
  },
});

export default activityTypesSlice.reducer;
